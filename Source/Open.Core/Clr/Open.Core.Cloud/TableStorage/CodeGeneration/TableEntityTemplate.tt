<#@ template language="C#" #>
<# if(IncludeHeaderDirectives) 
{ 
#>
// -----------------------------------------------------------------------
//   Generated code.
//   Changes will be overwritten next time this code is generated.
//   Created: <#= DateTime.Now #>
//   Generated by: <#= GetType().Name #> (<#= GetType().Namespace #>)
// -----------------------------------------------------------------------
using System;
using System.Data.Services.Common;
using Open.Core.Cloud.TableStorage;

<# } #>
namespace <#= this.Namespace #>
{
    /// <summary>An entity used to persist values on the '<#= this.ModelType.Name #>' model to TableStorage.</summary>
    [DataServiceEntity]
	public partial class <#= this.ClassName #> : <#= this.InterfaceName #>
    {
        // Constructors.
		public <#= this.ClassName #>() : this(String.Empty, Guid.NewGuid().ToString()) { }
		public <#= this.ClassName #>(string partitionKey) : this(partitionKey, Guid.NewGuid().ToString()) { PartitionKey = partitionKey; }
        public <#= this.ClassName #>(string partitionKey, string rowKey)
        {
            if (partitionKey == null) throw new ArgumentNullException("partitionKey");
            if (rowKey == null) throw new ArgumentNullException("rowKey");
            PartitionKey = partitionKey;
            RowKey = rowKey;
        }

        // Fields
        private string partitionKey;
        private string rowKey;

        // Properties
        public string PartitionKey
        {
            get { return string.IsNullOrEmpty(partitionKey) ? string.Empty : partitionKey; }
            set { partitionKey = value; }
        }
        public string RowKey
        {
            get { return string.IsNullOrEmpty(rowKey) ? string.Empty : rowKey; }
            set { rowKey = value; }
        }
        public DateTime Timestamp { get; set; }
<# foreach (var propertyInfo in Properties)
{ 
#>
        public <#= propertyInfo.ToString() #> { get; set; }
<# } #>
    }

    /// <summary>An entity used to persist values on the '<#= this.ModelType.Name #>' model to TableStorage.</summary>
    public partial interface <#= this.InterfaceName #> : ITableServiceEntity
    {
<# foreach (var propertyInfo in Properties)
{ 
#>
        <#= propertyInfo.ToString() #> { get; set; }
<# } #>
    }

    /// <summary>The table-service-context used to access the backing entity for the '<#= ModelType.Name #>' model.</summary>
    public partial class <#= ContextName #> : TableServiceContextBase<<#= ClassName #>>
    {
<# if( this.HasCustomTableName)  
{ 
#>
        protected override string GetCustomTableName()
        {
            return "<#= this.CustomTableName #>";
        }
<# } #>
    }
}