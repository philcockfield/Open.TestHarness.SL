// Open.Library.Jit.js
(function(){function executeScript(){
Type.registerNamespace('Open.Library.Jit');Open.Library.Jit.$create_HypertreeNode=function(id,name){var $o={};$o.id=id;$o.name=name;$o.children=[];return $o;}
Open.Library.Jit.JitCss=function(){}
Open.Library.Jit.Elements=function(){}
Open.Library.Jit.Hypertree=function(containerElement){if(containerElement==null){throw new Error('Container element not specified');}this.$3=containerElement;if(!Open.Core.Css.isLinked('/Open.Core/Css/Jit.Hypertree.css')){Open.Core.Css.insertLink('/Open.Core/Css/Jit.Hypertree.css');}$(window).bind(Open.Core.DomEvents.resize,ss.Delegate.create(this,function($p1_0){
this.$A();}));}
Open.Library.Jit.Hypertree.findWithin=function(id,node){if(node==null||ss.isNullOrUndefined(id)){return null;}if(id===node.id){return node;}var $enum1=ss.IEnumerator.getEnumerator(node.children);while($enum1.moveNext()){var $0=$enum1.get_current();if($0.id===id){return $0;}}var $enum2=ss.IEnumerator.getEnumerator(node.children);while($enum2.moveNext()){var $1=$enum2.get_current();var $2=Open.Library.Jit.Hypertree.findWithin(id,$1);if($2!=null){return $2;}}return null;}
Open.Library.Jit.Hypertree.mergeChildrenInto=function(source,target){if(source.id!==target.id){throw new Error('The source and target nodes are not the same.');}var $enum1=ss.IEnumerator.getEnumerator(source.children);while($enum1.moveNext()){var $0=$enum1.get_current();var $1=Open.Library.Jit.Hypertree.getChild(target,$0.id);if($1==null){target.children.add($0);}else{Open.Library.Jit.Hypertree.mergeChildrenInto($0,$1);}}}
Open.Library.Jit.Hypertree.getChild=function(parent,childId){if(ss.isNull(parent)){return null;}if(ss.isNullOrUndefined(parent.children)){return null;}var $enum1=ss.IEnumerator.getEnumerator(parent.children);while($enum1.moveNext()){var $0=$enum1.get_current();if($0.id===childId){return $0;}}return null;}
Open.Library.Jit.Hypertree.containsChild=function(parent,child){if(ss.isNull(parent)||ss.isNull(child)){return false;}return Open.Library.Jit.Hypertree.getChild(parent,child.id)!=null;}
Open.Library.Jit.Hypertree.prototype={add_selectedNodeChanged:function(value){this.$0=ss.Delegate.combine(this.$0,value);},remove_selectedNodeChanged:function(value){this.$0=ss.Delegate.remove(this.$0,value);},$0:null,$1:function(){if(this.$0!=null){this.$0.invoke(this,new ss.EventArgs());}},$2:null,$3:null,$4:false,$5:null,$6:null,$7:null,$8:null,$9:null,$A:function(){if(this.$7==null){this.$7=new Open.Core.DelayedAction(0.2,ss.Delegate.create(this,function(){
this.$D();}));}this.$7.start();},onNodeClick:function(node){this.$8=node;},onBeforeCompute:function(node){},onAfterCompute:function(){this.set_selectedNode(this.$8);},onAddComplete:function(){},get_rootNode:function(){return this.$5;},get_selectedNode:function(){return this.$6;},set_selectedNode:function(value){if(value===this.get_selectedNode()){return;}this.$6=value;this.$1();return value;},get_$B:function(){return this.$9||(this.$9=new Open.Library.Jit.OpenLibraryJit$0(this));},initialize:function(callback){Open.Core.Helper.get_scriptLoader().get_jit().loadHypertree(ss.Delegate.create(this,function(){
var $1_0=this.$3.attr('id');this.$2=insertHyperTree(this, $1_0);this.$D();this.$4=true;Open.Core.Helper.invokeOrDefault(callback);}));},load:function(rootNode){if(!this.$4){throw new Error('HyperTree not initialized');}this._hyperTree.loadJSON(rootNode);this.$5=rootNode;this.set_selectedNode(rootNode);this.refresh();},refresh:function(){if(!this.$4){return;}this._hyperTree.refresh();this._hyperTree.controller.onAfterCompute();},insertChild:function(parent,child){if(!Open.Library.Jit.Hypertree.containsChild(parent,child)){if(ss.isNullOrUndefined(parent.children)){parent.children=[];}parent.children.add(child);}this.get_$B().$2(parent,child);},completeInsertion:function(){this.get_$B().$3();this.$9=null;},$C:function($p0){var $0={};$0['type']='fade:con';$0['duration']=1000;$0['data']=$p0;addHyperTreeNodes(this, this.$2, $0);},find:function(id){return Open.Library.Jit.Hypertree.findWithin(id,this.get_rootNode());},select:function(node){if(node!=null){this._hyperTree.onClick(node.id);}this.set_selectedNode(node);},$D:function(){if(!this.$4){return;}var $0=this.$E();this._hyperTree.canvas.resize($0.get_width(), $0.get_height());this.refresh();this.select(this.get_selectedNode());},$E:function(){return new Open.Core.Size(this.$3.width(),this.$3.height());}}
Open.Library.Jit.OpenLibraryJit$1=function(control,parent){this.$2=[];if(control==null){throw new Error('Null control');}if(parent==null){throw new Error('Null parent');}this.$0=control;this.$1=parent;}
Open.Library.Jit.OpenLibraryJit$1.prototype={$0:null,$1:null,get_$3:function(){return this.$1;},$4:function($p0){this.$2.add($p0);},$5:function(){this.$0.$C(this.$6());},$6:function(){var $0=[];var $enum1=ss.IEnumerator.getEnumerator(this.$2);while($enum1.moveNext()){var $3=$enum1.get_current();$0.add($3.id);}var $1={};$1['id']=this.get_$3().id;$1['adjacencies']=$0;var $2=[];$2.add($1);var $enum2=ss.IEnumerator.getEnumerator(this.$2);while($enum2.moveNext()){var $4=$enum2.get_current();$2.add($4);}return $2;}}
Open.Library.Jit.OpenLibraryJit$0=function(control){this.$0=[];this.$1=control;}
Open.Library.Jit.OpenLibraryJit$0.prototype={$1:null,$2:function($p0,$p1){var $0=this.$4($p0);$0.$4($p1);},$3:function(){var $enum1=ss.IEnumerator.getEnumerator(this.$0);while($enum1.moveNext()){var $0=$enum1.get_current();$0.$3();}},$4:function($p0){var $enum1=ss.IEnumerator.getEnumerator(this.$0);while($enum1.moveNext()){var $1=$enum1.get_current();if($1.get_$3().id===$p0.id){return $1;}}var $0=new Open.Library.Jit.OpenLibraryJit$1(this.$1,$p0);this.$0.add($0);return $0;}}
Open.Library.Jit.HypertreeNodeFactory=function(){}
Open.Library.Jit.HypertreeNodeFactory.create=function(json){if(ss.isNullOrUndefined(json)){throw new Error('[Null] Cannot create from factory. JSON object not provided.');}var $0=Open.Library.Jit.$create_HypertreeNode(json['Id'],Type.safeCast(json['Name'],String));$0.data=json['Data'];var $1=Type.safeCast(json['Children'],Array);if(!ss.isNullOrUndefined($1)){var $enum1=ss.IEnumerator.getEnumerator($1);while($enum1.moveNext()){var $2=$enum1.get_current();$0.children.add(Open.Library.Jit.HypertreeNodeFactory.create($2));}}return $0;}
Open.Library.Jit.JitCss.registerClass('Open.Library.Jit.JitCss');Open.Library.Jit.Elements.registerClass('Open.Library.Jit.Elements');Open.Library.Jit.Hypertree.registerClass('Open.Library.Jit.Hypertree');Open.Library.Jit.OpenLibraryJit$1.registerClass('Open.Library.Jit.OpenLibraryJit$1');Open.Library.Jit.OpenLibraryJit$0.registerClass('Open.Library.Jit.OpenLibraryJit$0');Open.Library.Jit.HypertreeNodeFactory.registerClass('Open.Library.Jit.HypertreeNodeFactory');Open.Library.Jit.JitCss.hypertreeUrl='/Open.Core/Css/Jit.Hypertree.css';Open.Library.Jit.HypertreeNodeFactory.propId='Id';Open.Library.Jit.HypertreeNodeFactory.propName='Name';Open.Library.Jit.HypertreeNodeFactory.propChildren='Children';Open.Library.Jit.HypertreeNodeFactory.propData='Data';
// ---- Do not remove this footer ----
// This script was generated using Script# v0.6.0.0 (http://projects.nikhilk.net/ScriptSharp)
// -----------------------------------
}
ss.loader.registerScript('Open.Library.Jit',['Open.Core.Script'],executeScript);})();